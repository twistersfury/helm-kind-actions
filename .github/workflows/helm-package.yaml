name: Build and Test Repo
on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - main
  push:
    branches:
      - main

jobs:
  generate-semantic-version:
    runs-on: ubuntu-latest
    container:
      image: gittools/gitversion

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitVersion
        run: /tools/dotnet-gitversion /output buildserver

      - name: Saving Environment Variables
        run: |
          echo "GitVersion_LegacySemVer=$GitVersion_LegacySemVer" >> gitversion.env
          echo "GitVersion_SemVer=$GitVersion_SemVer" >> gitversion.env
          echo "GitVersion_FullSemVer=$GitVersion_FullSemVer" >> gitversion.env
          echo "GitVersion_Major=$GitVersion_Minor" >> gitversion.env
          echo "GitVersion_Patch=$GitVersion_Patch" >> gitversion.env
          echo "GitVersion_MajorMinorPatch=$GitVersion_MajorMinorPatch" >> gitversion.env

      - uses: actions/upload-artifact@v4
        with:
          name: gitversion.env
          path: gitversion.env

  build-helm-package:
    runs-on: ubuntu-latest
    needs:
      - generate-semantic-version

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: gitversion.env

      - name: Load Variables
        run: cat gitversion.env >> $GITHUB_ENV

      - uses: azure/setup-helm@v4.1.0
        with:
          version: '3.13.2'

      - name: Lint Charts
        run: helm lint .

      - name: Build Templates
        run: helm template helm . > helm.template.yaml

      - uses: actions/upload-artifact@v4
        with:
          name: helm.template.yaml
          path: helm.template.yaml

      - name: Package Helm
        run: helm package . --version $GitVersion_FullSemVer

      - uses: actions/upload-artifact@v4
        with:
          name: helm-kind-actions-${{ env.GitVersion_FullSemVer }}.tgz
          path: helm-kind-actions-${{ env.GitVersion_FullSemVer }}.tgz

  test-chart:
    runs-on: ubuntu-latest
    needs:
      - build-helm-package
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: gitversion.env

      - name: Load Variables
        run: cat gitversion.env >> $GITHUB_ENV

      - uses: actions/download-artifact@v4
        with:
          name: helm-kind-actions-${{ env.GitVersion_FullSemVer }}.tgz

      - uses: azure/setup-helm@v4.1.0
        with:
          version: '3.13.2'

      - name: Download Certificate
        run: |
          set -e

          mkdir -p ${{ github.workspace }}/.github/certs/registry.docker.com

          openssl s_client \
            -connect registry.docker.com:443 \
            -showcerts </dev/null \
          | openssl x509 \
            -outform pem > ${{ github.workspace }}/.github/certs/registry.docker.com/registry.crt

      # Only Checking Out .github Folder
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github
          sparse-checkout-cone-mode: false

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1
        with:
          config: ${{ github.workspace }}/.github/kind-config.yaml

      - name: Wait for and Configure Cluster
        run: |
          set -e

          kubectl cluster-info
          kubectl get nodes

          # Waiting For Cluster (30 Iterations)
          for i in $(seq 1 30); do
            if kubectl get nodes | grep NotReady &> /dev/null; then
              echo "KinD not Ready. Sleeping for 2s..."
              sleep 2s
            else
              echo "KinD Ready. Continuing build..."
              break
            fi
          done

          # Final Confirmation (In Case Loop Fails)
          if kubectl get nodes | grep NotReady &> /dev/null; then
            echo "KinD not Ready"
            exit 1
          fi

          kubectl get namespace
          kubectl config set-context --current --namespace default

          # Create Secret For Downloading From GHCR
          kubectl create secret docker-registry ghcr-login-secret \
            --docker-server=https://ghcr.io \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --docker-username=${{ secrets.DOCKER_USERNAME }}

          # Apply Additional Configurations, If Required
          if [ -n "$K8S_APPLY" ]; then
            echo "$K8S_APPLY" | kubectl apply -f -
          fi
